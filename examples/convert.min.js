import e from"node-fetch";import t from"is-url";import{getDocument as a,GlobalWorkerOptions as n}from"pdfjs-dist/legacy/build/pdf.mjs";import*as r from"canvas";import i from"assert";import s from"fs";import o from"util";const c=o.promisify(s.readFile);function f(){}n.workerSrc="pdfjs-dist/legacy/build/pdf.worker.mjs",f.prototype={create:function(e,t){i(e>0&&t>0,"Invalid canvas size");const a=r.createCanvas(e,t),n=a.getContext("2d");return{canvas:a,context:n}},reset:function(e,t,a){i(e.canvas,"Canvas is not specified"),i(t>0&&a>0,"Invalid canvas size"),e.canvas.width=t,e.canvas.height=a},destroy:function(e){i(e.canvas,"Canvas is not specified"),e.canvas.width=0,e.canvas.height=0,e.canvas=null,e.context=null}};export async function convert(n,r={}){let i=n;if("string"==typeof n)if(t(n)){const t=await e(n);i=new Uint8Array(await t.arrayBuffer())}else i=/pdfData:pdf\/([a-zA-Z]*);base64,([^"]*)/.test(n)?new Uint8Array(Buffer.from(n.split(",")[1],"base64")):new Uint8Array(await c(n));else if(Buffer.isBuffer(n))i=new Uint8Array(n);else if(!(n instanceof Uint8Array))return n;const s=[],o=a({data:i,disableFontFace:!0,verbosity:0}),l=await o.promise,d=new f;(r.height<=0||r.width<=0)&&console.error("Negative viewport dimension given. Defaulting to 100% scale.");const p=(r.page_numbers||Array.from({length:l.numPages},((e,t)=>t+1))).map((e=>async function(e,t,a,n){if(t<1||t>e.numPages)return void console.error("Invalid page number "+t);if(n.scale&&n.scale<=0)return void console.error("Invalid scale "+n.scale);const r=await e.getPage(t),i=n.scale||1;let s=r.getViewport({scale:i});if(n.width){const e=n.width/s.width;s=r.getViewport({scale:e})}else if(n.height){const e=n.height/s.height;s=r.getViewport({scale:e})}const o=a.create(s.width,s.height),c={canvasContext:o.context,viewport:s,canvasFactory:a};await r.render(c).promise;const f=o.canvas.toBuffer();return a.destroy(o),f}(l,e,d,r).then((e=>{if(null!=e)return r.base64?e.toString("base64"):new Uint8Array(e)}))));return(await Promise.all(p)).forEach((e=>{e&&s.push(e)})),s}